# coding: utf-8

"""
    watchTowr Platform Client API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ServiceInformationCertificate(BaseModel):
    """
    ServiceInformationCertificate
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt] = Field(description="ID")
    subject_common_name: StrictStr = Field(description="Subject Common Name", alias="subjectCommonName")
    subject_organisation: StrictStr = Field(description="Subject Organisation", alias="subjectOrganisation")
    subject_alt_names: List[StrictStr] = Field(description="Subject Alt Names", alias="subjectAltNames")
    subject_country: StrictStr = Field(description="Subject Country", alias="subjectCountry")
    issuer_common_name: StrictStr = Field(description="Issuer CommonName", alias="issuerCommonName")
    issuer_organisation: StrictStr = Field(description="Issuer Organisation", alias="issuerOrganisation")
    issuer_country: StrictStr = Field(description="Issuer Country", alias="issuerCountry")
    fingerprint: StrictStr = Field(description="Fingerprint")
    public_key_info_alg: StrictStr = Field(description="PublicKeyInfoAlg", alias="publicKeyInfoAlg")
    public_key_info_size: StrictStr = Field(description="PublicKeyInfoSize", alias="publicKeyInfoSize")
    status: StrictStr
    created_at: Optional[datetime] = Field(default=None, description="Discovery date", alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "subjectCommonName", "subjectOrganisation", "subjectAltNames", "subjectCountry", "issuerCommonName", "issuerOrganisation", "issuerCountry", "fingerprint", "publicKeyInfoAlg", "publicKeyInfoSize", "status", "createdAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Expired', 'Expiring Within 30 Days', 'Valid']):
            raise ValueError("must be one of enum values ('Expired', 'Expiring Within 30 Days', 'Valid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceInformationCertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceInformationCertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "subjectCommonName": obj.get("subjectCommonName"),
            "subjectOrganisation": obj.get("subjectOrganisation"),
            "subjectAltNames": obj.get("subjectAltNames"),
            "subjectCountry": obj.get("subjectCountry"),
            "issuerCommonName": obj.get("issuerCommonName"),
            "issuerOrganisation": obj.get("issuerOrganisation"),
            "issuerCountry": obj.get("issuerCountry"),
            "fingerprint": obj.get("fingerprint"),
            "publicKeyInfoAlg": obj.get("publicKeyInfoAlg"),
            "publicKeyInfoSize": obj.get("publicKeyInfoSize"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


