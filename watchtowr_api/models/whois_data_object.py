# coding: utf-8

"""
    watchTowr Platform Client API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api.models.whois_data_object_emails import WhoisDataObjectEmails
from watchtowr_api.models.whois_data_object_name_servers import WhoisDataObjectNameServers
from watchtowr_api.models.whois_data_object_status import WhoisDataObjectStatus
from typing import Optional, Set
from typing_extensions import Self

class WhoisDataObject(BaseModel):
    """
    WhoisDataObject
    """ # noqa: E501
    org: Optional[StrictStr] = Field(default=None, description="org")
    city: Optional[StrictStr] = Field(default=None, description="city")
    name: Optional[StrictStr] = Field(default=None, description="name")
    state: Optional[StrictStr] = Field(default=None, description="state")
    dnssec: Optional[StrictStr] = Field(default=None, description="dnssec")
    emails: Optional[WhoisDataObjectEmails] = None
    status: Optional[WhoisDataObjectStatus] = None
    address: Optional[StrictStr] = Field(default=None, description="address")
    country: Optional[StrictStr] = Field(default=None, description="country")
    zipcode: Optional[StrictStr] = Field(default=None, description="zipcode")
    registrar: Optional[StrictStr] = Field(default=None, description="registrar")
    domain_name: Optional[StrictStr] = Field(default=None, description="domain_name")
    name_servers: Optional[WhoisDataObjectNameServers] = None
    referral_url: Optional[StrictStr] = Field(default=None, description="referral_url")
    whois_server: Optional[StrictStr] = Field(default=None, description="whois_server")
    creation_date: Optional[StrictStr] = Field(default=None, description="creation_date")
    expiration_date: Optional[StrictStr] = Field(default=None, description="expiration_date")
    __properties: ClassVar[List[str]] = ["org", "city", "name", "state", "dnssec", "emails", "status", "address", "country", "zipcode", "registrar", "domain_name", "name_servers", "referral_url", "whois_server", "creation_date", "expiration_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhoisDataObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of emails
        if self.emails:
            _dict['emails'] = self.emails.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_servers
        if self.name_servers:
            _dict['name_servers'] = self.name_servers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhoisDataObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "org": obj.get("org"),
            "city": obj.get("city"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "dnssec": obj.get("dnssec"),
            "emails": WhoisDataObjectEmails.from_dict(obj["emails"]) if obj.get("emails") is not None else None,
            "status": WhoisDataObjectStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "address": obj.get("address"),
            "country": obj.get("country"),
            "zipcode": obj.get("zipcode"),
            "registrar": obj.get("registrar"),
            "domain_name": obj.get("domain_name"),
            "name_servers": WhoisDataObjectNameServers.from_dict(obj["name_servers"]) if obj.get("name_servers") is not None else None,
            "referral_url": obj.get("referral_url"),
            "whois_server": obj.get("whois_server"),
            "creation_date": obj.get("creation_date"),
            "expiration_date": obj.get("expiration_date")
        })
        return _obj


