# coding: utf-8

"""
    watchTowr Platform Client API SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from watchtowr_api.models.client_business_unit import ClientBusinessUnit
from watchtowr_api.models.service_type import ServiceType
from watchtowr_api.models.technology import Technology

class ServiceListing(BaseModel):
    """
    ServiceListing
    """
    id: Union[StrictFloat, StrictInt] = Field(..., description="ID")
    port_id: Union[StrictFloat, StrictInt] = Field(..., alias="portId", description="Port ID")
    ip: StrictStr = Field(..., description="IP Address")
    port: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Port number")
    type: Optional[StrictStr] = Field(None, description="Port Protocol")
    country: Optional[StrictStr] = Field(None, description="Country code")
    banner: Optional[StrictStr] = Field(None, description="Banner")
    service: Optional[StrictStr] = Field(None, description="Service")
    source: Optional[StrictStr] = Field(None, description="Asset source")
    last_seen: datetime = Field(..., alias="lastSeen", description="Last seen date Range")
    technologies: conlist(Technology) = Field(..., description="Technology list")
    service_types: conlist(ServiceType) = Field(..., alias="serviceTypes", description="Service types")
    business_units: conlist(ClientBusinessUnit) = Field(..., alias="businessUnits", description="Business units")
    __properties = ["id", "portId", "ip", "port", "type", "country", "banner", "service", "source", "lastSeen", "technologies", "serviceTypes", "businessUnits"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceListing:
        """Create an instance of ServiceListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in technologies (list)
        _items = []
        if self.technologies:
            for _item in self.technologies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['technologies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_types (list)
        _items = []
        if self.service_types:
            for _item in self.service_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serviceTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in business_units (list)
        _items = []
        if self.business_units:
            for _item in self.business_units:
                if _item:
                    _items.append(_item.to_dict())
            _dict['businessUnits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceListing:
        """Create an instance of ServiceListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceListing.parse_obj(obj)

        _obj = ServiceListing.parse_obj({
            "id": obj.get("id"),
            "port_id": obj.get("portId"),
            "ip": obj.get("ip"),
            "port": obj.get("port"),
            "type": obj.get("type"),
            "country": obj.get("country"),
            "banner": obj.get("banner"),
            "service": obj.get("service"),
            "source": obj.get("source"),
            "last_seen": obj.get("lastSeen"),
            "technologies": [Technology.from_dict(_item) for _item in obj.get("technologies")] if obj.get("technologies") is not None else None,
            "service_types": [ServiceType.from_dict(_item) for _item in obj.get("serviceTypes")] if obj.get("serviceTypes") is not None else None,
            "business_units": [ClientBusinessUnit.from_dict(_item) for _item in obj.get("businessUnits")] if obj.get("businessUnits") is not None else None
        })
        return _obj


