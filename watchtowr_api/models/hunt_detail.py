# coding: utf-8

"""
    watchTowr Platform Client API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class HuntDetail(BaseModel):
    """
    HuntDetail
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt] = Field(description="ID")
    priority: StrictStr = Field(description="Priority")
    type: StrictStr = Field(description="Type")
    created_at: datetime = Field(description="Created at")
    updated_at: datetime = Field(description="Updated at")
    total_findings: Union[StrictFloat, StrictInt] = Field(description="Total Findings")
    total_assets: Union[StrictFloat, StrictInt] = Field(description="Total Assets")
    hunt_request_type: StrictStr = Field(description="Hunt Request Type")
    title: StrictStr = Field(description="Title")
    description: StrictStr
    hypothesis: StrictStr = Field(description="Hypothesis")
    references: List[StrictStr] = Field(description="references")
    completed_at: datetime = Field(description="Completed at")
    completed_by: StrictStr = Field(description="Completed by")
    requested_by: StrictStr = Field(description="Request by")
    status: StrictStr = Field(description="Status")
    __properties: ClassVar[List[str]] = ["id", "priority", "type", "created_at", "updated_at", "total_findings", "total_assets", "hunt_request_type", "title", "description", "hypothesis", "references", "completed_at", "completed_by", "requested_by", "status"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['low', 'normal', 'medium', 'high']):
            raise ValueError("must be one of enum values ('low', 'normal', 'medium', 'high')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['bespoke', 'proactive']):
            raise ValueError("must be one of enum values ('bespoke', 'proactive')")
        return value

    @field_validator('hunt_request_type')
    def hunt_request_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Misconfig', 'Others', 'SoftwareVulnerability', 'ThreatIntelligence']):
            raise ValueError("must be one of enum values ('Misconfig', 'Others', 'SoftwareVulnerability', 'ThreatIntelligence')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['received', 'in-progress', 'completed']):
            raise ValueError("must be one of enum values ('received', 'in-progress', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuntDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuntDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "priority": obj.get("priority"),
            "type": obj.get("type"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "total_findings": obj.get("total_findings"),
            "total_assets": obj.get("total_assets"),
            "hunt_request_type": obj.get("hunt_request_type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "hypothesis": obj.get("hypothesis"),
            "references": obj.get("references"),
            "completed_at": obj.get("completed_at"),
            "completed_by": obj.get("completed_by"),
            "requested_by": obj.get("requested_by"),
            "status": obj.get("status")
        })
        return _obj


