# coding: utf-8

"""
    watchTowr Platform Client API SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class ClientFinding(BaseModel):
    """
    ClientFinding
    """
    id: Union[StrictFloat, StrictInt] = Field(...)
    title: StrictStr = Field(...)
    description: StrictStr = Field(...)
    impact: StrictStr = Field(...)
    evidence: StrictStr = Field(...)
    recommendation: StrictStr = Field(...)
    severity: StrictStr = Field(...)
    cvssv3_score: StrictInt = Field(...)
    cvssv3_metrics: StrictStr = Field(...)
    status: StrictStr = Field(...)
    created_at: Dict[str, Any] = Field(...)
    affected: Dict[str, Any] = Field(...)
    cve_id: Optional[StrictStr] = None
    __properties = ["id", "title", "description", "impact", "evidence", "recommendation", "severity", "cvssv3_score", "cvssv3_metrics", "status", "created_at", "affected", "cve_id"]

    @validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('critical', 'high', 'medium', 'low', 'info'):
            raise ValueError("must be one of enum values ('critical', 'high', 'medium', 'low', 'info')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('confirmed', 'unconfirmed', 'remediated', 'risk-accepted', 'closed', 'asset-no-longer-tracked'):
            raise ValueError("must be one of enum values ('confirmed', 'unconfirmed', 'remediated', 'risk-accepted', 'closed', 'asset-no-longer-tracked')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientFinding:
        """Create an instance of ClientFinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientFinding:
        """Create an instance of ClientFinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientFinding.parse_obj(obj)

        _obj = ClientFinding.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "impact": obj.get("impact"),
            "evidence": obj.get("evidence"),
            "recommendation": obj.get("recommendation"),
            "severity": obj.get("severity"),
            "cvssv3_score": obj.get("cvssv3_score"),
            "cvssv3_metrics": obj.get("cvssv3_metrics"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "affected": obj.get("affected"),
            "cve_id": obj.get("cve_id")
        })
        return _obj


