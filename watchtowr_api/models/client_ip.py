# coding: utf-8

"""
    watchTowr Platform Client API SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from watchtowr_api.models.client_business_unit import ClientBusinessUnit

class ClientIp(BaseModel):
    """
    ClientIp
    """
    type: StrictStr = Field(...)
    source: StrictStr = Field(...)
    status: StrictStr = Field(...)
    created_at: ModelDate = Field(...)
    updated_at: ModelDate = Field(...)
    deleted_at: ModelDate = Field(...)
    id: Union[StrictFloat, StrictInt] = Field(...)
    name: StrictStr = Field(...)
    business_units: conlist(ClientBusinessUnit) = Field(..., alias="businessUnits")
    __properties = ["type", "source", "status", "created_at", "updated_at", "deleted_at", "id", "name", "businessUnits"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('verified', 'Third Party', 'Unregistered', 'Incorrect Identification', 'pending', 'VerifiedOutOfScope', 'VerifiedReducedAttack', 'CDN', 'Hanging Cloud IP'):
            raise ValueError("must be one of enum values ('verified', 'Third Party', 'Unregistered', 'Incorrect Identification', 'pending', 'VerifiedOutOfScope', 'VerifiedReducedAttack', 'CDN', 'Hanging Cloud IP')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientIp:
        """Create an instance of ClientIp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted_at
        if self.deleted_at:
            _dict['deleted_at'] = self.deleted_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in business_units (list)
        _items = []
        if self.business_units:
            for _item in self.business_units:
                if _item:
                    _items.append(_item.to_dict())
            _dict['businessUnits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientIp:
        """Create an instance of ClientIp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientIp.parse_obj(obj)

        _obj = ClientIp.parse_obj({
            "type": obj.get("type"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "created_at": ModelDate.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "updated_at": ModelDate.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
            "deleted_at": ModelDate.from_dict(obj.get("deleted_at")) if obj.get("deleted_at") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "business_units": [ClientBusinessUnit.from_dict(_item) for _item in obj.get("businessUnits")] if obj.get("businessUnits") is not None else None
        })
        return _obj


