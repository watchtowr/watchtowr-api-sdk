# coding: utf-8

"""
    watchTowr Platform Client API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from watchtowr_api.models.paginated_service_listing import PaginatedServiceListing

from watchtowr_api.api_client import ApiClient, RequestSerialized
from watchtowr_api.api_response import ApiResponse
from watchtowr_api.rest import RESTResponseType


class ServiceListingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_list_service_listing(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination page. The default value is 1")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination size. The default value is 10 and the maximum is 30")] = None,
        created_from: Annotated[Optional[datetime], Field(description="created_at Date Range Beginning")] = None,
        created_to: Annotated[Optional[datetime], Field(description="created_at Date Range Ending")] = None,
        updated_from: Annotated[Optional[datetime], Field(description="updated_at Date Range Beginning")] = None,
        updated_to: Annotated[Optional[datetime], Field(description="updated_at Date Range Ending")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search string")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list of countries.")] = None,
        technology_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of technology IDs.")] = None,
        ports: Annotated[Optional[StrictStr], Field(description="Comma separated list of Port/Protocol")] = None,
        port_numbers: Annotated[Optional[StrictStr], Field(description="Comma separated list of Ports")] = None,
        port_types: Annotated[Optional[StrictStr], Field(description="Comma separated list of transport layer protocol (e.g. UDP/TCP)")] = None,
        port_services: Annotated[Optional[StrictStr], Field(description="Comma separated list of services.")] = None,
        service_type_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of service type IDs.")] = None,
        business_unit_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of Business Unit IDs")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by")] = None,
        include_closed_port: Annotated[Optional[StrictBool], Field(description="Include \"Closed\" ports")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedServiceListing:
        """List all discovered services.


        :param page: Pagination page. The default value is 1
        :type page: float
        :param page_size: Pagination size. The default value is 10 and the maximum is 30
        :type page_size: float
        :param created_from: created_at Date Range Beginning
        :type created_from: datetime
        :param created_to: created_at Date Range Ending
        :type created_to: datetime
        :param updated_from: updated_at Date Range Beginning
        :type updated_from: datetime
        :param updated_to: updated_at Date Range Ending
        :type updated_to: datetime
        :param search: Search string
        :type search: str
        :param countries: Comma separated list of countries.
        :type countries: str
        :param technology_ids: Comma separated list of technology IDs.
        :type technology_ids: str
        :param ports: Comma separated list of Port/Protocol
        :type ports: str
        :param port_numbers: Comma separated list of Ports
        :type port_numbers: str
        :param port_types: Comma separated list of transport layer protocol (e.g. UDP/TCP)
        :type port_types: str
        :param port_services: Comma separated list of services.
        :type port_services: str
        :param service_type_ids: Comma separated list of service type IDs.
        :type service_type_ids: str
        :param business_unit_ids: Comma separated list of Business Unit IDs
        :type business_unit_ids: str
        :param sort_by: Sort by
        :type sort_by: str
        :param order_by: Order by
        :type order_by: str
        :param include_closed_port: Include \"Closed\" ports
        :type include_closed_port: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_service_listing_serialize(
            page=page,
            page_size=page_size,
            created_from=created_from,
            created_to=created_to,
            updated_from=updated_from,
            updated_to=updated_to,
            search=search,
            countries=countries,
            technology_ids=technology_ids,
            ports=ports,
            port_numbers=port_numbers,
            port_types=port_types,
            port_services=port_services,
            service_type_ids=service_type_ids,
            business_unit_ids=business_unit_ids,
            sort_by=sort_by,
            order_by=order_by,
            include_closed_port=include_closed_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedServiceListing",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_list_service_listing_with_http_info(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination page. The default value is 1")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination size. The default value is 10 and the maximum is 30")] = None,
        created_from: Annotated[Optional[datetime], Field(description="created_at Date Range Beginning")] = None,
        created_to: Annotated[Optional[datetime], Field(description="created_at Date Range Ending")] = None,
        updated_from: Annotated[Optional[datetime], Field(description="updated_at Date Range Beginning")] = None,
        updated_to: Annotated[Optional[datetime], Field(description="updated_at Date Range Ending")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search string")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list of countries.")] = None,
        technology_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of technology IDs.")] = None,
        ports: Annotated[Optional[StrictStr], Field(description="Comma separated list of Port/Protocol")] = None,
        port_numbers: Annotated[Optional[StrictStr], Field(description="Comma separated list of Ports")] = None,
        port_types: Annotated[Optional[StrictStr], Field(description="Comma separated list of transport layer protocol (e.g. UDP/TCP)")] = None,
        port_services: Annotated[Optional[StrictStr], Field(description="Comma separated list of services.")] = None,
        service_type_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of service type IDs.")] = None,
        business_unit_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of Business Unit IDs")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by")] = None,
        include_closed_port: Annotated[Optional[StrictBool], Field(description="Include \"Closed\" ports")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedServiceListing]:
        """List all discovered services.


        :param page: Pagination page. The default value is 1
        :type page: float
        :param page_size: Pagination size. The default value is 10 and the maximum is 30
        :type page_size: float
        :param created_from: created_at Date Range Beginning
        :type created_from: datetime
        :param created_to: created_at Date Range Ending
        :type created_to: datetime
        :param updated_from: updated_at Date Range Beginning
        :type updated_from: datetime
        :param updated_to: updated_at Date Range Ending
        :type updated_to: datetime
        :param search: Search string
        :type search: str
        :param countries: Comma separated list of countries.
        :type countries: str
        :param technology_ids: Comma separated list of technology IDs.
        :type technology_ids: str
        :param ports: Comma separated list of Port/Protocol
        :type ports: str
        :param port_numbers: Comma separated list of Ports
        :type port_numbers: str
        :param port_types: Comma separated list of transport layer protocol (e.g. UDP/TCP)
        :type port_types: str
        :param port_services: Comma separated list of services.
        :type port_services: str
        :param service_type_ids: Comma separated list of service type IDs.
        :type service_type_ids: str
        :param business_unit_ids: Comma separated list of Business Unit IDs
        :type business_unit_ids: str
        :param sort_by: Sort by
        :type sort_by: str
        :param order_by: Order by
        :type order_by: str
        :param include_closed_port: Include \"Closed\" ports
        :type include_closed_port: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_service_listing_serialize(
            page=page,
            page_size=page_size,
            created_from=created_from,
            created_to=created_to,
            updated_from=updated_from,
            updated_to=updated_to,
            search=search,
            countries=countries,
            technology_ids=technology_ids,
            ports=ports,
            port_numbers=port_numbers,
            port_types=port_types,
            port_services=port_services,
            service_type_ids=service_type_ids,
            business_unit_ids=business_unit_ids,
            sort_by=sort_by,
            order_by=order_by,
            include_closed_port=include_closed_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedServiceListing",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_list_service_listing_without_preload_content(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination page. The default value is 1")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Pagination size. The default value is 10 and the maximum is 30")] = None,
        created_from: Annotated[Optional[datetime], Field(description="created_at Date Range Beginning")] = None,
        created_to: Annotated[Optional[datetime], Field(description="created_at Date Range Ending")] = None,
        updated_from: Annotated[Optional[datetime], Field(description="updated_at Date Range Beginning")] = None,
        updated_to: Annotated[Optional[datetime], Field(description="updated_at Date Range Ending")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search string")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list of countries.")] = None,
        technology_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of technology IDs.")] = None,
        ports: Annotated[Optional[StrictStr], Field(description="Comma separated list of Port/Protocol")] = None,
        port_numbers: Annotated[Optional[StrictStr], Field(description="Comma separated list of Ports")] = None,
        port_types: Annotated[Optional[StrictStr], Field(description="Comma separated list of transport layer protocol (e.g. UDP/TCP)")] = None,
        port_services: Annotated[Optional[StrictStr], Field(description="Comma separated list of services.")] = None,
        service_type_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of service type IDs.")] = None,
        business_unit_ids: Annotated[Optional[StrictStr], Field(description="Comma separated list of Business Unit IDs")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by")] = None,
        include_closed_port: Annotated[Optional[StrictBool], Field(description="Include \"Closed\" ports")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all discovered services.


        :param page: Pagination page. The default value is 1
        :type page: float
        :param page_size: Pagination size. The default value is 10 and the maximum is 30
        :type page_size: float
        :param created_from: created_at Date Range Beginning
        :type created_from: datetime
        :param created_to: created_at Date Range Ending
        :type created_to: datetime
        :param updated_from: updated_at Date Range Beginning
        :type updated_from: datetime
        :param updated_to: updated_at Date Range Ending
        :type updated_to: datetime
        :param search: Search string
        :type search: str
        :param countries: Comma separated list of countries.
        :type countries: str
        :param technology_ids: Comma separated list of technology IDs.
        :type technology_ids: str
        :param ports: Comma separated list of Port/Protocol
        :type ports: str
        :param port_numbers: Comma separated list of Ports
        :type port_numbers: str
        :param port_types: Comma separated list of transport layer protocol (e.g. UDP/TCP)
        :type port_types: str
        :param port_services: Comma separated list of services.
        :type port_services: str
        :param service_type_ids: Comma separated list of service type IDs.
        :type service_type_ids: str
        :param business_unit_ids: Comma separated list of Business Unit IDs
        :type business_unit_ids: str
        :param sort_by: Sort by
        :type sort_by: str
        :param order_by: Order by
        :type order_by: str
        :param include_closed_port: Include \"Closed\" ports
        :type include_closed_port: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_service_listing_serialize(
            page=page,
            page_size=page_size,
            created_from=created_from,
            created_to=created_to,
            updated_from=updated_from,
            updated_to=updated_to,
            search=search,
            countries=countries,
            technology_ids=technology_ids,
            ports=ports,
            port_numbers=port_numbers,
            port_types=port_types,
            port_services=port_services,
            service_type_ids=service_type_ids,
            business_unit_ids=business_unit_ids,
            sort_by=sort_by,
            order_by=order_by,
            include_closed_port=include_closed_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedServiceListing",
            '401': "Unauthorized",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_list_service_listing_serialize(
        self,
        page,
        page_size,
        created_from,
        created_to,
        updated_from,
        updated_to,
        search,
        countries,
        technology_ids,
        ports,
        port_numbers,
        port_types,
        port_services,
        service_type_ids,
        business_unit_ids,
        sort_by,
        order_by,
        include_closed_port,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if created_from is not None:
            if isinstance(created_from, datetime):
                _query_params.append(
                    (
                        'created_from',
                        created_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            if isinstance(created_to, datetime):
                _query_params.append(
                    (
                        'created_to',
                        created_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_to', created_to))
            
        if updated_from is not None:
            if isinstance(updated_from, datetime):
                _query_params.append(
                    (
                        'updated_from',
                        updated_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_from', updated_from))
            
        if updated_to is not None:
            if isinstance(updated_to, datetime):
                _query_params.append(
                    (
                        'updated_to',
                        updated_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_to', updated_to))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if technology_ids is not None:
            
            _query_params.append(('technologyIds', technology_ids))
            
        if ports is not None:
            
            _query_params.append(('ports', ports))
            
        if port_numbers is not None:
            
            _query_params.append(('portNumbers', port_numbers))
            
        if port_types is not None:
            
            _query_params.append(('portTypes', port_types))
            
        if port_services is not None:
            
            _query_params.append(('portServices', port_services))
            
        if service_type_ids is not None:
            
            _query_params.append(('serviceTypeIds', service_type_ids))
            
        if business_unit_ids is not None:
            
            _query_params.append(('businessUnitIds', business_unit_ids))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if include_closed_port is not None:
            
            _query_params.append(('includeClosedPort', include_closed_port))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/client/service-listing/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


